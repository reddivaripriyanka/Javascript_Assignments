1. Write a JS program to create object of person with fields as follows:-

fname - string
lname - string
age - int
skills - array
address - object
	city - string
	pincode - int
dateOfBirth - Date
married - Boolean
profession - string


Answer:
//person1 details
var person1={fname:"priyanka",
lname:"reddivari",
age:21,
skills:["coding","cooking","listening","singing"],
address:{city:"chittoor",pincode:517125},
dateOfBirth:new Date('20-04-1997'),
proffession:"Employee",
married:true}
//person2 details
var person2={fname:"bhanu",
lname:"reddivari",
age:21,
skills:["Mechanical","civil","chemical","CSE"],
address:{city:"Tirupathi",pincode:517125},
dateOfBirth:new Date('05-05-1969'),
proffession:"farmer",
married:true}

print=function()
{
console.log("person1 details\n",person1);
console.log("person2 details\n",person2);
}
print();


2. Modify the above program to create 2 objects, amitabh and abhishek, here abhishek has some common properties from amitabh, try to use it such common properties from amitabh instead of creating it in abhishek.


//Creating Object for Amitabh
var Amitabh={fname:"priyanka",
lname:"reddivari",
age:21,
skills:["coding","cooking","listening","singing"],
address:{city:"Chittoor",pincode:517135},
dateOfBirth:new Date('20-04-1997'),
proffession:"Employee",
married:true}
//Creating Object for Abhishek
var Abhishek={fname:"bhanu",
age:45,
skills:["Mechanical","civil","chemical","CSE"],
dateOfBirth:new Date('05-05-1969'),
proffession:"HouseWife",
married:true}
console.log(Abhishek);
print=function()
{
var Abhishek=Object.create(Amitabh); //By creating object we are accessing properties from parent one
console.log(Amitabh.fname);
console.log(Abhishek.lname);
console.log(Abhishek.address);
}
print();


3. Modify the above code to create third object as "Aaradhya", this object shares the common properties from amitabh as well as abhishek accordingly demostrate on your own.


//Creating Object for Amitabh
var Amitabh={fname:"Bhanu",
lname:"reddivari",
age:45,
skills:['coding','cooking','listening','singing'],
address:{city:"Chittoor",pincode:517135},
dateOfBirth:new Date('05-05-1969'),
proffession:"HouseWife",
married:true}
//Creating Object for Abhishek
var Abhishek={fname:"priyanka",
age:21,
skills:["Mechanical","civil","chemical","CSE"],
dateOfBirth:new Date('1997-04-20'),
proffession:"Employee",
married:true}
//Creating object for Aaradhya 
var Aaradhya={fname:"siri",
age:10,
skills:["Eating","sleepin"],
dateOfBirth:new Date('2010-10-20'),
proffession:"kid",
married:false}
console.log(Abhishek); //it prints only Abhishek details
console.log(Amitabh); //it prints only Amitabh details
print=function()
{
var Abhishek=Object.create(Amitabh); //By creating object we are accessing properties from parent one
var Aaradhya=Object.create(Amitabh) //By creating object we are accessing properties from parent one
console.log(Amitabh.fname);
console.log(Abhishek.lname);
console.log(Aaradhya.lname);
console.log(Abhishek.address);
}
print();


4. Create a JS program to implement below:-

	   BankAccount
		|(accountNumber)
		|(accountHolderName)
		|(accountBalance)
	-------------------------
	|			|
	Savings			Current
	    (isSalary)		     (odLimit)


Now, 
create 1 object of savings with accountNumber, accountHolderName, accountBalance and isSalary.
create 1 object of currrent with accountNumber, accountHolderName, accountBalance and odLimit.

use savings account object to call a function withdraw(amount), that will subtract the amount from the accountBalance, Note that accountBalance should not go below 0.

use current account object to calla function withdraw(amount), that will subtract the amount from the accountBalance, Note that accountBalance should not go below negative of odLimit.

Now, call getCurrentBalance() from both the object, that will return the accountBalance of the object used to call this method.


class BankAccount
{
    constructor(accountNumber,accountHolderName,accountBalance)
    {
        this.accountNumber=BankAccount;
        this.accountHolderName=accountHolderName;
        this.accountBalance=accountBalance;
    }
    deposit(amount)
    {
        this.accountBalance+=amount;
    }
    getAccountBalance()
    {
            console.log("Account balance->"+this.accountBalance);
    }
}
// class for saving 
class Saving extends BankAccount
{
        constructor(accountNumber,accountHolderName,accountBalance,isSalary)
        {
        super(accountNumber,accountHolderName,accountBalance)
        this.isSalary=isSalary;
        }
        withdraw(amount)
        {
            if(this.accountBalance>=amount)
            {
            this.accountBalance-=amount;
            }
            else
            {
                console.log("Insufficient Amount");
            }
        }
        getAccountBalance()
        {
            console.log("Savings Account balacne->"+this.accountBalance);
        }
}
// class for current account
class Current extends BankAccount
{
        constructor(accountNumber,accountHolderName,accountBalance,odLimit)
        {
        super(accountNumber,accountHolderName,accountBalance)
        this.odLimit=odLimit;
        }
        withdraw(amount)
        {
            if(this.accountBalance+this.odLimt<=amount)
            {
                console.log("Insufficient Amount");
            } 
            else
            {
                this.accountBalance-=amount;
            }
        }
            getAccountBalance()
            {
                console.log("Current Accout balance->"+ this.accountBalance);
            }
}
        var BankAccountObject=new BankAccount(43532,"Theja",5000);      //object for BankAccount
        var CurrentAccountObject=new Current(23456,"Bhanu",5000,3000)   //object for CurrentAccount
        var SavingAccountObject=new Saving(12345,"priyanka",5000,true); //object for SavingAccountss  
        BankAccountObject.deposit(5000);
        CurrentAccountObject.withdraw(2500);
        BankAccountObject.getAccountBalance();
        SavingAccountObject.getAccountBalance();
        CurrentAccountObject.getAccountBalance();
       
      



